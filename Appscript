function doGet(e) {
  try {
    if (e.parameter.action === "getComments") {
      return ContentService.createTextOutput(JSON.stringify(getComments())).setMimeType(ContentService.MimeType.JSON);
    } else if (e.parameter.action === "getLikes") {
      return ContentService.createTextOutput(JSON.stringify(getLikes(e.parameter.phrase))).setMimeType(ContentService.MimeType.JSON);
    }
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Invalid action' })).setMimeType(ContentService.MimeType.JSON);
  } catch (e) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Server error: ' + e.message })).setMimeType(ContentService.MimeType.JSON);
  }
}

function doPost(e) {
  try {
    var action = e.parameter.action;
    if (action === "addLike") {
      var phrase = e.parameter.phrase;
      if (!phrase) throw new Error('Phrase is required');
      return ContentService.createTextOutput(JSON.stringify(addLike(phrase))).setMimeType(ContentService.MimeType.JSON);
    } else if (action === "addCommentLike") {
      var commentId = e.parameter.commentId;
      var isReply = e.parameter.isReply === 'true';
      if (!commentId) throw new Error('Comment ID is required');
      return ContentService.createTextOutput(JSON.stringify(addCommentLike(commentId, isReply))).setMimeType(ContentService.MimeType.JSON);
    } else if (action === "addComment" || action === "addReply") {
      var timestamp = e.parameter.timestamp || new Date().toISOString();
      var username = e.parameter.username;
      var comment = e.parameter.comment;
      var parentId = e.parameter.parentId;
      if (!username || !comment) throw new Error('Username and comment are required');
      var params = { timestamp: timestamp, username: username, comment: comment, parentId: parentId };
      return ContentService.createTextOutput(JSON.stringify(addComment(params))).setMimeType(ContentService.MimeType.JSON);
    } else {
      return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Invalid action' })).setMimeType(ContentService.MimeType.JSON);
    }
  } catch (e) {
    return ContentService.createTextOutput(JSON.stringify({ status: 'error', message: 'Server error: ' + e.message })).setMimeType(ContentService.MimeType.JSON);
  }
}

function getComments() {
  try {
    var ss = SpreadsheetApp.openById('1ApuOtJ8e_3ID_DwcGU6QGuye8HCr3yCM1zZTXp27n-M');
    var sheet = ss.getSheetByName('Comments');
    var replySheet = ss.getSheetByName('CommentReply');
    if (!sheet || !replySheet) {
      throw new Error('Comments or CommentReply sheet not found');
    }
    var data = sheet.getDataRange().getValues();
    var replyData = replySheet.getDataRange().getValues();
    var comments = [];

    for (var i = 1; i < data.length; i++) {
      if (data[i][0] && data[i][1] && data[i][2]) {
        var commentId = 'C' + (i + 1);
        var replies = [];
        for (var j = 1; j < replyData.length; j++) {
          if (replyData[j][1] === commentId && replyData[j][2]) {
            replies.push({
              id: 'R' + (j + 1),
              reply: replyData[j][2],
              likes: replyData[j][3] || 0
            });
          }
        }
        comments.push({
          id: commentId,
          username: data[i][1],
          comment: data[i][2],
          likes: data[i][3] || 0,
          replies: replies
        });
      }
    }
    return { status: 'success', comments: comments };
  } catch (e) {
    return { status: 'error', message: 'Error fetching comments: ' + e.message };
  }
}

function getLikes(phrase) {
  try {
    var ss = SpreadsheetApp.openById('1ApuOtJ8e_3ID_DwcGU6QGuye8HCr3yCM1zZTXp27n-M');
    var sheet = ss.getSheetByName('Likes');
    if (!sheet) throw new Error('Likes sheet not found');
    var data = sheet.getDataRange().getValues();
    var likes = 0;
    for (var i = 1; i < data.length; i++) {
      if (data[i][0] === phrase) {
        likes = data[i][1] || 0;
        break;
      }
    }
    return { status: 'success', likes: likes };
  } catch (e) {
    return { status: 'error', message: 'Error fetching likes: ' + e.message };
  }
}

function addLike(phrase) {
  try {
    var ss = SpreadsheetApp.openById('1ApuOtJ8e_3ID_DwcGU6QGuye8HCr3yCM1zZTXp27n-M');
    var sheet = ss.getSheetByName('Likes');
    if (!sheet) throw new Error('Likes sheet not found');
    var data = sheet.getDataRange().getValues();
    var found = false;
    for (var i = 1; i < data.length; i++) {
      if (data[i][0] === phrase) {
        var likes = (data[i][1] || 0) + 1;
        sheet.getRange(i + 1, 2).setValue(likes);
        found = true;
        break;
      }
    }
    if (!found) {
      sheet.appendRow([phrase, 1]);
    }
    SpreadsheetApp.flush();
    return { status: 'success', likes: found ? likes : 1 };
  } catch (e) {
    return { status: 'error', message: 'Error adding like: ' + e.message };
  }
}

function addComment(params) {
  try {
    var ss = SpreadsheetApp.openById('1ApuOtJ8e_3ID_DwcGU6QGuye8HCr3yCM1zZTXp27n-M');
    var sheet = params.parentId ? ss.getSheetByName('CommentReply') : ss.getSheetByName('Comments');
    if (!sheet) throw new Error(params.parentId ? 'CommentReply sheet not found' : 'Comments sheet not found');
    var id;
    if (params.parentId) {
      var replyText = params.username + ': ' + params.comment;
      sheet.appendRow([params.timestamp, params.parentId, replyText, 0]);
      id = 'R' + sheet.getLastRow();
    } else {
      sheet.appendRow([params.timestamp, params.username, params.comment, 0]);
      id = 'C' + sheet.getLastRow();
    }
    SpreadsheetApp.flush();
    return { status: 'success', id: id };
  } catch (e) {
    return { status: 'error', message: 'Error adding comment: ' + e.message };
  }
}

function addCommentLike(commentId, isReply) {
  try {
    var ss = SpreadsheetApp.openById('1ApuOtJ8e_3ID_DwcGU6QGuye8HCr3yCM1zZTXp27n-M');
    var sheet = isReply ? ss.getSheetByName('CommentReply') : ss.getSheetByName('Comments');
    if (!sheet) throw new Error(isReply ? 'CommentReply sheet not found' : 'Comments sheet not found');
    var data = sheet.getDataRange().getValues();
    var index = parseInt(commentId.substring(1));
    if (index <= data.length && index > 0) {
      var likes = (data[index - 1][3] || 0) + 1;
      sheet.getRange(index, 4).setValue(likes);
      SpreadsheetApp.flush();
      return { status: 'success', likes: likes };
    }
    return { status: 'error', message: 'Comment not found' };
  } catch (e) {
    return { status: 'error', message: 'Error adding comment like: ' + e.message };
  }
}
